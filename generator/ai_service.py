import os, zipfile
from openai import OpenAI
from django.conf import settings
from pathlib import Path

# Initialize OpenAI client with error handling
try:
    if not settings.OPENAI_API_KEY:
        print("⚠️  Warning: OPENAI_API_KEY not found in settings. Website generation will use fallback.")
        client = None
    else:
        client = OpenAI(api_key=settings.OPENAI_API_KEY)
        print("✅ OpenAI client initialized successfully")
except Exception as e:
    print(f"❌ Error initializing OpenAI client: {e}")
    client = None

def generate_website_code(prompt: str) -> str:
  
    # Check if OpenAI client is available
    if not client:
        return generate_fallback_website(prompt)
    
    try:
        # Enhanced system prompt for better website generation
        system_prompt = """You are an expert web developer that creates complete, professional websites. 
        Generate a full HTML page with embedded CSS and JavaScript that includes:
        1. Complete HTML structure with proper DOCTYPE, head, and body
        2. Embedded CSS styles for modern, responsive design
        3. JavaScript for interactivity when needed
        4. Mobile-responsive design
        5. Professional styling with good colors and typography
        6. All code in a single HTML file
        
        Make sure the website is complete and fully functional. Do not truncate the response."""
        
        # Enhanced user prompt
        enhanced_prompt = f"""Create a complete, professional website for: {prompt}
        
        Requirements:
        - Single HTML file with embedded CSS and JS
        - Mobile responsive design
        - Modern styling with good UX
        - Include all necessary sections
        - Professional appearance
        - Complete and functional code
        
        Generate the COMPLETE website code:"""
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": enhanced_prompt}
            ],
            temperature=0.7,
            max_tokens=16384  # Increased from 1000 to 8000 for complete websites
        )

        code = response.choices[0].message.content
        
        # Check if response was truncated and handle it
        if response.choices[0].finish_reason == 'length':
            print("Warning: Response was truncated due to token limit")
            # Try to ensure we have at least a closing html tag
            if not code.strip().endswith('</html>'):
                code += "\n</body>\n</html>"
        
        # Validate that we have a complete HTML structure
        if not code.strip().startswith('<!DOCTYPE') and not code.strip().startswith('<html'):
            code = f"<!DOCTYPE html>\n<html lang='en'>\n<head>\n<meta charset='UTF-8'>\n<meta name='viewport' content='width=device-width, initial-scale=1.0'>\n<title>Generated Website</title>\n</head>\n<body>\n{code}\n</body>\n</html>"
        
        return code

    except Exception as e:
        return f"Error: {str(e)}"



def save_website_as_zip(site_obj, code: str):
    """
    Save the generated HTML/CSS/JS code into a zip file and attach to GeneratedSite.
    Creates a professional folder structure with separate files when possible.
    """
    site_dir = Path(settings.MEDIA_ROOT) / "sites"
    site_dir.mkdir(parents=True, exist_ok=True)
    
    # Create a temporary directory for this site
    temp_dir = site_dir / f"temp_{site_obj.id}"
    temp_dir.mkdir(exist_ok=True)

    try:
        # Define paths
        zip_path = site_dir / f"site_{site_obj.id}.zip"
        
        # Try to extract CSS and JS from the HTML if they're embedded
        html_content, css_content, js_content = extract_embedded_assets(code)
        
        # Create the zip file with proper structure
        with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zipf:
            # Add main HTML file
            zipf.writestr("index.html", html_content)
            
            # Add CSS file if extracted
            if css_content:
                zipf.writestr("styles.css", css_content)
                
            # Add JS file if extracted  
            if js_content:
                zipf.writestr("script.js", js_content)
                
            # Add a README with instructions
            readme_content = f"""# Generated Website

This website was generated by AI Website Generator.

## Files:
- index.html: Main HTML file
{'- styles.css: Stylesheet' if css_content else ''}
{'- script.js: JavaScript code' if js_content else ''}

## Instructions:
1. Extract all files to a folder
2. Open index.html in a web browser
3. Upload to any web hosting service

## Generated on: {site_obj.created_at.strftime('%Y-%m-%d %H:%M:%S')}
"""
            zipf.writestr("README.md", readme_content)

        # Save file reference to DB
        site_obj.generated_code = code
        site_obj.generated_file.name = f"sites/site_{site_obj.id}.zip"
        site_obj.status = "completed"
        site_obj.save()
        
    finally:
        # Clean up temp directory
        if temp_dir.exists():
            import shutil
            shutil.rmtree(temp_dir, ignore_errors=True)


def extract_embedded_assets(html_code: str) -> tuple:
    """
    Extract embedded CSS and JavaScript from HTML code.
    Returns: (html_without_embedded, css_content, js_content)
    """
    import re
    
    css_content = ""
    js_content = ""
    modified_html = html_code
    
    # Extract CSS from <style> tags
    css_matches = re.findall(r'<style[^>]*>([\s\S]*?)</style>', html_code, re.IGNORECASE)
    if css_matches:
        css_content = '\n\n'.join(css_matches)
        # Replace style tags with link to external CSS
        modified_html = re.sub(r'<style[^>]*>[\s\S]*?</style>', '', modified_html, flags=re.IGNORECASE)
        # Add link to external CSS in head
        modified_html = re.sub(r'</head>', '    <link rel="stylesheet" href="styles.css">\n</head>', modified_html, flags=re.IGNORECASE)
    
    # Extract JavaScript from <script> tags (only inline scripts, not src)
    js_matches = re.findall(r'<script(?![^>]*src)[^>]*>([\s\S]*?)</script>', html_code, re.IGNORECASE)
    if js_matches:
        js_content = '\n\n'.join(js_matches)
        # Replace inline script tags with link to external JS
        modified_html = re.sub(r'<script(?![^>]*src)[^>]*>[\s\S]*?</script>', '', modified_html, flags=re.IGNORECASE)
        # Add link to external JS before closing body tag
        modified_html = re.sub(r'</body>', '    <script src="script.js"></script>\n</body>', modified_html, flags=re.IGNORECASE)
    
    return modified_html, css_content, js_content


def test_generate_simple_website():
    """
    Test function to generate a simple website for debugging.
    """
    test_prompt = "Create a simple landing page for a coffee shop called 'Mauli Café' with a hero section, menu, and contact information."
    
    try:
        code = generate_website_code(test_prompt)
        print(f"Generated {len(code)} characters of code")
        print(f"Code starts with: {code[:100]}...")
        print(f"Code ends with: ...{code[-100:]}")
        return code
    except Exception as e:
        print(f"Test generation failed: {e}")
        return None


def generate_fallback_website(prompt: str) -> str:
    """
    Generate a fallback website when OpenAI API is not available.
    Creates a professional template-based website.
    """
    # Extract key information from prompt
    business_name = extract_business_name(prompt)
    business_type = extract_business_type(prompt)
    
    # Generate a professional fallback website
    return f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{business_name}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
        }}
        
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }}
        
        header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 0;
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        
        nav {{
            display: flex;
            justify-content: space-between;
            align-items: center;
        }}
        
        .logo {{
            font-size: 1.5rem;
            font-weight: bold;
        }}
        
        .nav-links {{
            display: flex;
            list-style: none;
            gap: 2rem;
        }}
        
        .nav-links a {{
            color: white;
            text-decoration: none;
            transition: opacity 0.3s;
        }}
        
        .nav-links a:hover {{
            opacity: 0.8;
        }}
        
        .hero {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 120px 0 80px;
            text-align: center;
        }}
        
        .hero h1 {{
            font-size: 3rem;
            margin-bottom: 1rem;
            animation: fadeInUp 1s ease-out;
        }}
        
        .hero p {{
            font-size: 1.2rem;
            margin-bottom: 2rem;
            opacity: 0.9;
            animation: fadeInUp 1s ease-out 0.2s both;
        }}
        
        .cta-button {{
            display: inline-block;
            background: white;
            color: #667eea;
            padding: 15px 30px;
            text-decoration: none;
            border-radius: 50px;
            font-weight: bold;
            transition: all 0.3s;
            animation: fadeInUp 1s ease-out 0.4s both;
        }}
        
        .cta-button:hover {{
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        }}
        
        .section {{
            padding: 80px 0;
        }}
        
        .section:nth-child(even) {{
            background: #f8f9fa;
        }}
        
        .section-title {{
            text-align: center;
            font-size: 2.5rem;
            margin-bottom: 3rem;
            color: #333;
        }}
        
        .grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }}
        
        .card {{
            background: white;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s;
        }}
        
        .card:hover {{
            transform: translateY(-10px);
        }}
        
        .card-icon {{
            font-size: 3rem;
            margin-bottom: 1rem;
            color: #667eea;
        }}
        
        .card h3 {{
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: #333;
        }}
        
        .card p {{
            color: #666;
            line-height: 1.6;
        }}
        
        footer {{
            background: #333;
            color: white;
            text-align: center;
            padding: 2rem 0;
        }}
        
        @keyframes fadeInUp {{
            from {{
                opacity: 0;
                transform: translateY(30px);
            }}
            to {{
                opacity: 1;
                transform: translateY(0);
            }}
        }}
        
        @media (max-width: 768px) {{
            .nav-links {{
                display: none;
            }}
            
            .hero h1 {{
                font-size: 2rem;
            }}
            
            .hero p {{
                font-size: 1rem;
            }}
            
            .grid {{
                grid-template-columns: 1fr;
            }}
        }}
    </style>
</head>
<body>
    <header>
        <nav class="container">
            <div class="logo">{business_name}</div>
            <ul class="nav-links">
                <li><a href="#home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#services">Services</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </nav>
    </header>

    <section class="hero" id="home">
        <div class="container">
            <h1>Welcome to {business_name}</h1>
            <p>Your trusted {business_type} providing excellent service and quality</p>
            <a href="#contact" class="cta-button">Get Started</a>
        </div>
    </section>

    <section class="section" id="about">
        <div class="container">
            <h2 class="section-title">About Us</h2>
            <div class="grid">
                <div class="card">
                    <div class="card-icon">🏆</div>
                    <h3>Quality Service</h3>
                    <p>We are committed to providing the highest quality service to all our customers.</p>
                </div>
                <div class="card">
                    <div class="card-icon">🚀</div>
                    <h3>Fast & Reliable</h3>
                    <p>Quick turnaround times without compromising on quality or reliability.</p>
                </div>
                <div class="card">
                    <div class="card-icon">👥</div>
                    <h3>Expert Team</h3>
                    <p>Our experienced team is dedicated to exceeding your expectations.</p>
                </div>
            </div>
        </div>
    </section>

    <section class="section" id="services">
        <div class="container">
            <h2 class="section-title">Our Services</h2>
            <div class="grid">
                <div class="card">
                    <div class="card-icon">⚙️</div>
                    <h3>Professional Service</h3>
                    <p>High-quality professional services tailored to your specific needs.</p>
                </div>
                <div class="card">
                    <div class="card-icon">📊</div>
                    <h3>Business Solutions</h3>
                    <p>Comprehensive business solutions to help you achieve your goals.</p>
                </div>
                <div class="card">
                    <div class="card-icon">📞</div>
                    <h3>24/7 Support</h3>
                    <p>Round-the-clock customer support to assist you whenever you need help.</p>
                </div>
            </div>
        </div>
    </section>

    <section class="section" id="contact">
        <div class="container">
            <h2 class="section-title">Contact Us</h2>
            <div class="grid">
                <div class="card">
                    <div class="card-icon">📧</div>
                    <h3>Email</h3>
                    <p>info@{business_name.lower().replace(' ', '')}.com</p>
                </div>
                <div class="card">
                    <div class="card-icon">📞</div>
                    <h3>Phone</h3>
                    <p>+1 (555) 123-4567</p>
                </div>
                <div class="card">
                    <div class="card-icon">📍</div>
                    <h3>Address</h3>
                    <p>123 Business Street<br>City, State 12345</p>
                </div>
            </div>
        </div>
    </section>

    <footer>
        <div class="container">
            <p>&copy; 2025 {business_name}. All rights reserved. | Generated by AI Website Generator</p>
        </div>
    </footer>

    <script>
        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {{
            anchor.addEventListener('click', function (e) {{
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {{
                    target.scrollIntoView({{
                        behavior: 'smooth',
                        block: 'start'
                    }});
                }}
            }});
        }});
        
        // Add some interactivity to cards
        document.querySelectorAll('.card').forEach(card => {{
            card.addEventListener('mouseenter', function() {{
                this.style.transform = 'translateY(-10px) scale(1.02)';
            }});
            
            card.addEventListener('mouseleave', function() {{
                this.style.transform = 'translateY(0) scale(1)';
            }});
        }});
    </script>
</body>
</html>"""


def extract_business_name(prompt: str) -> str:
    """
    Extract business name from prompt or generate a default one.
    """
    import re
    
    # Look for common patterns like "for [business name]" or "called [business name]"
    patterns = [
        r'for\s+([A-Z][\w\s&]+?)(?:\s+with|\s+that|\.|$)',
        r'called\s+["\']([^"\']+)["\']'
#         r'called\s+["\']([^"\'

# ]+)["\']',
        r'called\s+([A-Z][\w\s&]+?)(?:\s+with|\s+that|\.|$)',
        r'named\s+([A-Z][\w\s&]+?)(?:\s+with|\s+that|\.|$)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, prompt, re.IGNORECASE)
        if match:
            name = match.group(1).strip()
            if len(name) > 2 and len(name) < 50:
                return name
    
    # If no business name found, generate based on business type
    business_type = extract_business_type(prompt)
    if 'restaurant' in business_type.lower() or 'food' in business_type.lower():
        return "Delicious Eats"
    elif 'coffee' in business_type.lower() or 'caf' in business_type.lower():
        return "Mauli Café"
    elif 'shop' in business_type.lower() or 'store' in business_type.lower():
        return "Quality Store"
    else:
        return "Professional Business"


def extract_business_type(prompt: str) -> str:
    """
    Extract business type from prompt.
    """
    prompt_lower = prompt.lower()
    
    business_types = {
        'restaurant': ['restaurant', 'dining', 'food', 'cuisine', 'menu'],
        'coffee shop': ['coffee', 'café', 'cafe', 'espresso', 'latte'],
        'retail store': ['shop', 'store', 'retail', 'boutique', 'market'],
        'consulting firm': ['consulting', 'consultant', 'advisory', 'services'],
        'tech company': ['tech', 'software', 'app', 'digital', 'technology'],
        'healthcare': ['medical', 'healthcare', 'clinic', 'doctor', 'health'],
        'fitness center': ['gym', 'fitness', 'workout', 'exercise', 'training'],
        'salon': ['salon', 'beauty', 'hair', 'spa', 'cosmetic'],
    }
    
    for business_type, keywords in business_types.items():
        if any(keyword in prompt_lower for keyword in keywords):
            return business_type
    
    return "business"
